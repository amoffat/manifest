Consider the following Python function definition with an incomplete implementation:

<python-src>
{{ fn }}
</python-src>

The function is being called with the following arguments:

<arguments>
    {%- for arg in args %}
    <argument>
        <name>{{ arg.name }}</name>
        <jsonschema>
            {{ arg.schema | trim | indent(12) }}
        </jsonschema>
        <value>
            {{ arg.value | trim | indent(12) }}
        </value>
        {%- if arg.src %}
        <python-src>
            {{ arg.src | trim | indent(12) }}
        </python-src>
        {%- endif %}
    </argument>
    {%- endfor %}
</arguments>

The return value defined by the following jsonschema:

<return-type>
    <jsonschema>
        {{ return_type.schema | trim | indent(8)}}
    </jsonschema>
    {%- if return_type.src %}
    <python-src>
        {{ return_type.src | trim | indent(8) }}
    </python-src>
    {%- endif %}
</return-type>

Imagine calling the function with the above arguments and returning a value of the correct return type. Write your response as the following XML document:

<return-value>
    ...
</return-value>

The <return-value> tag should contain the json-formatted return value of the function call, conforming to the jsonschema defined in the <return-type>'s <jsonschema> tag.